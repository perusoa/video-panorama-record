{"version":3,"sources":["src/index.js"],"names":["Vue","component","template","props","data","isPlaying","video","paused","volume","playbackRate","progress","hoveredTime","isRecording","videoChunks","videoStream","mediaRecorder","recordingInterval","recordingTime","browserCanRecord","mounted","updateProgress","videoMode","MediaRecorder","isTypeSupported","initializeVideoStream","methods","currentTime","duration","updateTime","event","x","percentHovered","offsetX","$refs","progressBar","clientWidth","updateHoveredTime","progressTime","style","left","togglePlayPause","play","pause","seekVideo","updatePlayback","target","value","toggleVolume","muted","toggleFullscreen","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","webkitEnterFullScreen","streamOptions","panorama","captureStream","mimeType","addEventListener","e","push","videoBlob","Blob","clippedVideo","URL","createObjectURL","window","confirm","downloadVideoFile","uuidv4","toggleRecording","stopVideoRecording","startVideoRecording","start","setInterval","stop","clearInterval","filename","mime","bom","blobData","blob","type","navigator","msSaveBlob","blobURL","webkitURL","tempLink","document","createElement","display","href","setAttribute","download","body","appendChild","click","setTimeout","removeChild","revokeObjectURL","watch","filters","prettyTime","hrs","mins","secs","ret","isLoading","canvas","videoEl","xBoundary","yBoundary","currentX","currentY","zoom","computed","currentVideo","panoramaVideoUrl","hdVideoUrl","isPanoramaMode","initializeVideoCanvas","sizeCanvas","resizeCanvas","fabric","Canvas","selection","Image","top","objectCaching","hasControls","hasBorders","centeredScaling","scaleToHeight","clientHeight","add","centerObject","util","requestAnimFrame","render","renderAll","on","handleCanvasBoundaries","setZoom","panoramaHelpText","classList","obj","canvasEdgeLeft","canvasEdgeTop","canvasWidth","canvasHeight","setCoords","getScaledWidth","getScaledHeight","getBoundingRect","getWidth","getHeight","toggleVideoMode","$nextTick","width","panoramaWrapper","height","setWidth","setHeight","calcOffset","updateDuration","deltaY","Number","Math","min","max","toFixed","canvasCenter","getCenter","zoomToPoint","y","preventDefault","stopPropagation","fire","$forceUpdate","el"],"mappings":"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","file":"src.a4010a68.js","sourceRoot":"..","sourcesContent":["import \"./styles.css\";\n\nVue.component(\"video-player-loader\", {\n  template: `\n    <div class=\"c-video-player-loader\">\n      <div class=\"preloader-wrapper big active\">\n        <div class=\"spinner-layer spinner-blue-only\">\n          <div class=\"circle-clipper left\">\n            <div class=\"circle\"></div>\n          </div><div class=\"gap-patch\">\n            <div class=\"circle\"></div>\n          </div><div class=\"circle-clipper right\">\n            <div class=\"circle\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `\n});\n\nVue.component(\"video-player-controls\", {\n  props: [\"video\", \"currentTime\", \"duration\", \"videoMode\", \"panorama\"],\n  template: `\n    <div class=\"c-video-player-controls\">\n      <div ref=\"progressBar\" class=\"c-video-player-controls__progress-bar\" @click=\"updateTime\" @mousemove=\"updateHoveredTime\">\n        <div class=\"c-video-player-controls__progress\" :style=\"{ flexBasis: progress + '%', maxWidth: progress + '%' }\"></div>\n        <span ref=\"progressTime\" class=\"c-video-player-controls__progress-time\">{{ hoveredTime | prettyTime }}</span>\n      </div>\n      <div class=\"c-video-player-controls__wrapper\">\n        <button @click=\"togglePlayPause\" class=\"c-video-player-controls__play-pause\">\n          <i v-if=\"!isPlaying\" class=\"material-icons\">play_arrow</i>\n          <i v-if=\"isPlaying\" class=\"material-icons\">pause</i>\n        </button>\n        <button class=\"c-video-player-controls__volume\" @click=\"toggleVolume\">\n          <i v-if=\"volume === 1\" class=\"material-icons\">volume_up</i>\n          <i v-if=\"volume === 0\" class=\"material-icons\">volume_off</i>\n        </button>\n        <div class=\"c-video-player-controls__time\">\n          {{ currentTime | prettyTime }} / {{ duration | prettyTime }}\n        </div>\n        <button class=\"c-video-player-controls__mode btn btn-small btn-flat\" @click=\"$emit('change-video-mode')\">\n          {{ videoMode === 'panorama' ? 'Standard' : 'Panorama' }} View\n        </button>\n        <button v-if=\"videoMode === 'panorama' && browserCanRecord\" class=\"c-video-player-controls__record\" :class=\"{ 'c-video-player-controls__record--recording': isRecording }\" @click=\"toggleRecording\">\n          Rec\n          <i class=\"material-icons\">fiber_manual_record</i>\n          ({{ recordingTime }})\n        </button>\n        <select class=\"c-video-player-controls__playback\" v-model=\"playbackRate\" @change=\"updatePlayback\">\n          <option :value=\"0.5\">0.5x</option>\n          <option :value=\"1.0\">1x</option>\n          <option :value=\"1.5\">1.5x</option>\n          <option :value=\"2.0\">2x</option>\n        </select>\n        <div class=\"c-video-player-controls__seeks\">\n          <button class=\"c-video-player-controls__seek\" @click=\"seekVideo(-10)\">\n            <i class=\"material-icons\">replay_10</i>\n          </button>\n          <button class=\"c-video-player-controls__seek\" @click=\"seekVideo(10)\">\n            <i class=\"material-icons\">forward_10</i>\n          </button>\n        </div>\n        <button @click=\"toggleFullscreen\" class=\"c-video-player-controls__fullscreen\">\n          <i class=\"material-icons\">fullscreen</i>\n        </button>\n      </div>\n    </div>\n  `,\n  data() {\n    return {\n      isPlaying: !this.video.paused,\n      volume: 1,\n      playbackRate: 1.0,\n      progress: 0,\n      hoveredTime: 0,\n      isRecording: false,\n      videoChunks: [],\n      videoStream: null,\n      mediaRecorder: null,\n      recordingInterval: null,\n      recordingTime: 0,\n      browserCanRecord: false\n    };\n  },\n  mounted () {\n    this.updateProgress();\n    if (this.videoMode === 'panorama') {\n      if (MediaRecorder.isTypeSupported('video/webm')) {\n        this.browserCanRecord = true;\n        this.initializeVideoStream();\n      }\n    }\n  },\n  methods: {\n    updateProgress () {\n      this.progress = (this.currentTime / this.duration) * 100;\n    },\n    updateTime(event) {\n      const x = event.offsetX;\n      const width = this.$refs.progressBar.clientWidth;\n      const percentHovered = x / width;\n      this.video.currentTime = this.duration * percentHovered;\n    },\n    updateHoveredTime(event) {\n      const x = event.offsetX;\n      const width = this.$refs.progressBar.clientWidth;\n      const percentHovered = x / width;\n      this.hoveredTime = this.duration * percentHovered;\n      this.$refs.progressTime.style.left =\n        \"calc(\" +\n        percentHovered * 100 +\n        \"% - \" +\n        this.$refs.progressTime.clientWidth / 2 +\n        \"px)\";\n    },\n    togglePlayPause() {\n      if (this.video.paused) {\n        this.video.play();\n        this.isPlaying = true;\n      } else {\n        this.video.pause();\n        this.isPlaying = false;\n      }\n    },\n    seekVideo(duration) {\n      this.video.currentTime += duration;\n    },\n    updatePlayback(event) {\n      this.video.playbackRate = event.target.value;\n    },\n    toggleVolume() {\n      this.volume = this.volume === 1 ? 0 : 1;\n      if (this.volume === 0) {\n        this.video.muted = true;\n        this.video.volume = 0;\n      } else {\n        this.video.muted = false;\n        this.video.volume = 1;\n      }\n    },\n    toggleFullscreen() {\n      if (this.video.requestFullscreen) {\n        this.video.requestFullscreen();\n      } else if (this.video.webkitRequestFullscreen) {\n        this.video.webkitRequestFullscreen();\n      } else if (this.video.msRequestFullscreen) {\n        this.video.msRequestFullscreen();\n      } else if (this.video.webkitEnterFullScreen) {\n        this.video.webkitEnterFullScreen();\n      }\n    },\n    initializeVideoStream () {\n      this.videoStream = this.panorama.captureStream();\n      let streamOptions;\n      if (MediaRecorder.isTypeSupported('video/webm;codecs=vp9')) {\n        streamOptions = { mimeType: 'video/webm; codecs=vp9' };\n      } else if (MediaRecorder.isTypeSupported('video/webm;codecs=vp8')) {\n        streamOptions = { mimeType: 'video/webm; codecs=vp8' };\n      } else {\n        streamOptions = { mimeType: 'video/webm' };\n      }\n      this.mediaRecorder = new MediaRecorder(this.videoStream, streamOptions);\n\n      this.mediaRecorder.addEventListener('dataavailable', (e) => {\n        this.videoChunks.push(e.data);\n      });\n\n      this.mediaRecorder.addEventListener('stop', (e) => {\n        const videoBlob = new Blob(this.videoChunks, { 'type': 'video/webm' });\n        this.videoChunks = [];\n        this.clippedVideo = URL.createObjectURL(videoBlob);\n        if (window.confirm('Are you sure you want to download this clip?')) {\n          this.downloadVideoFile(videoBlob, uuidv4() + '.webm');\n        }\n      });\n    },\n    toggleRecording () {\n      if (!this.isRecording) {\n        this.startVideoRecording();\n      } else {\n        this.stopVideoRecording();\n      }\n    },\n    startVideoRecording () {\n      this.mediaRecorder.start(1000);\n      this.isRecording = true;\n      this.recordingInterval = setInterval(() => {\n        this.recordingTime++;\n        if (this.recordingTime > 60) {\n          this.stopVideoRecording();\n        }\n      }, 1000);\n    },\n    stopVideoRecording () {\n      this.mediaRecorder.stop();\n      this.isRecording = false;\n      clearInterval(this.recordingInterval);\n      this.recordingTime = 0;\n    },\n    downloadVideoFile (data, filename, mime, bom) {\n      var blobData = (typeof bom !== 'undefined') ? [bom, data] : [data]\n      var blob = new Blob(blobData, {type: mime || 'application/octet-stream'});\n      if (typeof window.navigator.msSaveBlob !== 'undefined') {\n        // IE workaround for \"HTML7007: One or more blob URLs were\n        // revoked by closing the blob for which they were created.\n        // These URLs will no longer resolve as the data backing\n        // the URL has been freed.\"\n        window.navigator.msSaveBlob(blob, filename);\n      }\n      else {\n        var blobURL = (window.URL && window.URL.createObjectURL) ? window.URL.createObjectURL(blob) : window.webkitURL.createObjectURL(blob);\n        var tempLink = document.createElement('a');\n        tempLink.style.display = 'none';\n        tempLink.href = blobURL;\n        tempLink.setAttribute('download', filename);\n\n        // Safari thinks _blank anchor are pop ups. We only want to set _blank\n        // target if the browser does not support the HTML5 download attribute.\n        // This allows you to download files in desktop safari if pop up blocking\n        // is enabled.\n        if (typeof tempLink.download === 'undefined') {\n          tempLink.setAttribute('target', '_blank');\n        }\n\n        document.body.appendChild(tempLink);\n        tempLink.click();\n\n        // Fixes \"webkit blob resource error 1\"\n        setTimeout(function() {\n          document.body.removeChild(tempLink);\n          window.URL.revokeObjectURL(blobURL);\n        }, 200);\n      }\n    }\n  },\n  watch: {\n    currentTime() {\n      this.updateProgress();\n    }\n  },\n  filters: {\n    prettyTime(value) {\n      let hrs = ~~(value / 3600);\n      let mins = ~~((value % 3600) / 60);\n      let secs = ~~value % 60;\n\n      let ret = \"\";\n      if (hrs > 0) {\n        ret += \"\" + hrs + \":\" + (mins < 10 ? \"0\" : \"\");\n      }\n      ret += \"\" + mins + \":\" + (secs < 10 ? \"0\" : \"\");\n      ret += \"\" + secs;\n      return ret;\n    }\n  }\n});\n\nVue.component(\"video-player\", {\n  props: [\"hdVideoUrl\", \"panoramaVideoUrl\"],\n  template: `\n    <div class=\"c-video-player\">\n      <div v-if=\"isPanoramaMode\" ref=\"panoramaWrapper\" class=\"c-video-player__video\">\n        <div class=\"c-video-player__help-text\" ref=\"panoramaHelpText\">Click &amp; Drag To Navigate Panorama</div>\n        <canvas ref=\"panorama\" class=\"c-video-player__canvas\"></canvas>\n        <video-player-controls\n          v-if=\"video && panorama\"\n          :video=\"video\"\n          :current-time=\"currentTime\"\n          :duration=\"duration\"\n          :video-mode=\"videoMode\"\n          :panorama=\"panorama\"\n          @change-video-mode=\"toggleVideoMode\">\n        </video-player-controls>\n        <video-player-loader v-if=\"isLoading\"></video-player-loader>\n      </div>\n      <div class=\"c-video-player__video\" :class=\"{ 'c-video-player__video--panorama': isPanoramaMode }\">\n        <video\n          data-id=\"<%= @game.id %>\"\n          data-user=\"<%= current_user.email %>\"\n          data-clip-settings=\"<%= ClipSetting.first.max_clips %>\"\n          data-download-clip=\"<%= @user_game.download_full_clip %>\"\n          data-download-partial-clip=\"<%= @user_game.download_partial_clip %>\"\n          data-refund-payment=\"<%= @refunded_payments %>\"\n          ref=\"video\"\n          class=\"c-video-player__player\"\n          :src=\"currentVideo\"\n          width=\"3840\"\n          height=\"900\"\n          playsinline\n          @timeupdate=\"updateTime\"\n          @loadedmetadata=\"updateDuration\"\n        >\n          <source :src=\"currentVideo\" type=\"video/mp4\">\n        </video>\n        <video-player-controls\n          v-if=\"video && !isPanoramaMode\"\n          :video=\"video\"\n          :current-time=\"currentTime\"\n          :duration=\"duration\"\n          :video-mode=\"videoMode\"\n          @change-video-mode=\"toggleVideoMode\">\n        </video-player-controls>\n      </div>\n    </div>\n  `,\n  data() {\n    return {\n      isLoading: false,\n      videoMode: \"panorama\", // 'hd' or 'panorama'\n      canvas: null,\n      video: null,\n      videoEl: null,\n      panorama: null,\n      xBoundary: 0,\n      yBoundary: 0,\n      currentX: 0,\n      currentY: 0,\n      zoom: 1,\n      currentTime: 0,\n      duration: 0\n    };\n  },\n  computed: {\n    currentVideo() {\n      return this.videoMode === \"panorama\"\n        ? this.panoramaVideoUrl\n        : this.hdVideoUrl;\n    },\n    isPanoramaMode() {\n      return this.videoMode === \"panorama\";\n    }\n  },\n  mounted() {\n    this.isLoading = true;\n    this.video = this.$refs.video;\n    if (this.videoMode === 'panorama') {\n      this.initializeVideoCanvas();\n    }\n  },\n  methods: {\n    initializeVideoCanvas() {\n      this.sizeCanvas();\n      window.addEventListener(\"resize\", this.resizeCanvas);\n      this.canvas = new fabric.Canvas(this.$refs.panorama);\n      this.canvas.selection = false;\n      this.panorama = this.$refs.panorama;\n      this.videoEl = new fabric.Image(this.video, {\n        left: 0,\n        top: 0,\n        objectCaching: false,\n        hasControls: false,\n        hasBorders: false,\n        centeredScaling: true\n      });\n\n      this.videoEl.scaleToHeight(this.panorama.clientHeight);\n      this.canvas.add(this.videoEl);\n      this.canvas.centerObject(this.videoEl);\n\n      const render = () => {\n        this.canvas.renderAll();\n        fabric.util.requestAnimFrame(render);\n      };\n\n      fabric.util.requestAnimFrame(render);\n\n      this.canvas.on(\"object:moving\", this.handleCanvasBoundaries);\n      this.canvas.on(\"mouse:wheel\", this.setZoom);\n      this.canvas.on(\"mouse:down\", () => {\n        this.$refs.panoramaHelpText.classList.add(\"is-hidden\");\n      });\n\n      this.currentX = this.videoEl.left;\n      this.currentY = this.videoEl.top;\n    },\n    handleCanvasBoundaries(event) {\n      let obj = event.target;\n      const canvasWidth = this.panorama.clientWidth;\n      const canvasHeight = this.panorama.clientHeight;\n      let canvasEdgeLeft = 0;\n      let canvasEdgeTop = 0;\n      obj.setCoords();\n      this.xBoundary = canvasWidth - obj.getScaledWidth();\n      this.yBoundary = canvasHeight - obj.getScaledHeight();\n      const scaledVideo = obj.getBoundingRect();\n      canvasEdgeLeft = (((this.canvas.getWidth() * this.zoom) - this.canvas.getWidth()) / 4);\n      canvasEdgeTop = (((this.canvas.getHeight() * this.zoom) -this.canvas.getHeight()) / 4);\n      this.xBoundary = this.xBoundary - (canvasEdgeLeft / 2);\n      this.yBoundary = this.yBoundary - (canvasEdgeTop / 2);\n\n      if (obj.left > canvasEdgeLeft) {\n        obj.left = canvasEdgeLeft;\n      } else if (obj.left < this.xBoundary) {\n        obj.left = this.xBoundary;\n      }\n\n      if (obj.top > canvasEdgeTop) {\n        obj.top = canvasEdgeTop;\n      } else if (obj.top < this.yBoundary) {\n        obj.top = this.yBoundary;\n      }\n    },\n    toggleVideoMode() {\n      this.videoMode = this.videoMode === \"panorama\" ? \"hd\" : \"panorama\";\n      if (this.videoMode === \"panorama\") {\n        this.$nextTick(() => {\n          this.initializeVideoCanvas();\n        });\n      }\n    },\n    sizeCanvas() {\n      this.$refs.panorama.width = this.$refs.panoramaWrapper.clientWidth;\n      this.$refs.panorama.height = this.$refs.panoramaWrapper.clientHeight;\n    },\n    resizeCanvas() {\n      this.canvas.setWidth(this.$refs.panoramaWrapper.clientWidth);\n      this.canvas.setHeight(this.$refs.panoramaWrapper.clientHeight);\n      this.videoEl.scaleToHeight(this.panorama.clientHeight);\n      this.canvas.calcOffset();\n      this.canvas.centerObject(this.videoEl);\n    },\n    updateTime(event) {\n      this.currentTime = event.target.currentTime;\n    },\n    updateDuration(event) {\n      this.isLoading = false;\n      this.duration = event.target.duration;\n    },\n    setZoom({ e: event }) {\n      this.zoom += event.deltaY * -0.01;\n      this.zoom = Number(Math.min(Math.max(1, this.zoom), 4).toFixed(2));\n      const canvasCenter = this.canvas.getCenter();\n      this.canvas.zoomToPoint({ x: canvasCenter.left, y: canvasCenter.top }, this.zoom);\n      this.videoEl.setCoords();\n      event.preventDefault();\n      event.stopPropagation();\n      this.canvas.fire('object:moving', { target: this.videoEl });\n    }\n  },\n  watch: {\n    currentVideo() {\n      this.isLoading = true;\n      this.$nextTick(() => {\n        this.video.currentTime = this.currentTime;\n        this.$forceUpdate();\n      });\n    }\n  }\n});\n\nnew Vue({\n  el: \"#app\"\n});\n"]}